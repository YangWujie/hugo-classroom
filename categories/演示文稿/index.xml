<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>演示文稿 on H@pPY</title>
    <link>http://yangwujie.github.io/hugo-classroom/categories/%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BF/</link>
    <description>Recent content in 演示文稿 on H@pPY</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 30 May 2022 17:54:23 +0800</lastBuildDate><atom:link href="http://yangwujie.github.io/hugo-classroom/categories/%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>内存布局</title>
      <link>http://yangwujie.github.io/hugo-classroom/slides/c/memory/</link>
      <pubDate>Mon, 30 May 2022 17:54:23 +0800</pubDate>
      
      <guid>http://yangwujie.github.io/hugo-classroom/slides/c/memory/</guid>
      <description>C语言程序的
内存布局   memory-layout.c:一个极简C程序框架  int main() { 	return 0; }  数据段和代码段   用gcc建造该程序，并用GNU工具size查看可执行程序中各部分的大小：  $ gcc memory-layout.c -o memory-layout $ size memory-layout text data bss dec hex filename 1418 544 8 1970 7b2 memory-layout   给程序增加一个全局变量：  1double global; 2 3int main() 4{ 5	return 0; 6}  $ gcc memory-layout.c -o memory-layout $ size memory-layout text data bss dec hex filename 1418 544 16 1978 7ba memory-layout  再次查看，比较两次的数据差异可知，变量global位于bss段。   bss  这是一个被沿用的古老的名字。 是block starting symbol的缩写。 其中的数据未被初始化，所以在目标文件中只记录大小，但并不占用空间。 程序运行时，在内存为bss中的数据分配空间，默认值为0。   问题  请想办法验证bss中的数据在目标文件中真的不占用空间，并说明为什么可以这样？    给程序增加两个静态变量：  1double global; 2 3int main() 4{ 5	static int i, j; 6	return 0; 7}  $ gcc memory-layout.</description>
    </item>
    
    <item>
      <title>File</title>
      <link>http://yangwujie.github.io/hugo-classroom/slides/c/file/</link>
      <pubDate>Mon, 30 May 2022 09:19:36 +0800</pubDate>
      
      <guid>http://yangwujie.github.io/hugo-classroom/slides/c/file/</guid>
      <description>C文件输入输出   文件无处不住，这包括你的头文件，你的源程序文件，编译生成的目标文件，链接得到的可执行文件 不涉及文件操作的C程序几乎不存在 即便那个最简单的Hello World程序也涉及文件操作，只不过穿了个马甲   printf就是个穿了马甲的文件操作
#include &amp;lt;stdio.h&amp;gt; int main() { 	printf(&amp;#34;Hello World!\n&amp;#34;); 	return 0; }  马甲之下的真相：
#include &amp;lt;stdio.h&amp;gt; int main() { 	fprintf(stdout, &amp;#34;Hello World!\n&amp;#34;); 	return 0; } 这个程序和原来的Hello World程序等价。
 标准输出设备  stdout即标准输出设备，程序运行时系统自动为你打开 除了stdout之外，系统还自动打开了stdin（标准输入设备）和stderr（标准错误设备） 文件、设备、流几个术语在某些场合下经常互换使用   int printf ( const char *format, ... ); int fprintf( FILE *stream, const char *format, ... ); 看了它们的函数原型，了解它们为什么有那样的名字了吧？
 stream − This is the pointer to a FILE object that identifies the stream.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://yangwujie.github.io/hugo-classroom/slides/c/hello-world/</link>
      <pubDate>Sun, 29 May 2022 16:30:51 +0800</pubDate>
      
      <guid>http://yangwujie.github.io/hugo-classroom/slides/c/hello-world/</guid>
      <description>Hello World in C
及C程序的编译和链接过程
 hello.c
#include &amp;lt;stdio.h&amp;gt; int main() { 	printf(&amp;#34;Hello World!\n&amp;#34;); 	return 0; }  yang@ubuntu:~$ gcc hello.c -o hello yang@ubuntu:~$ ./hello Hello World! yang@ubuntu:~$  建造程序：gcc hello.c -o hello 运行程序：./hello 运行结果：$ Hello World!   Why do you need ./ (dot-slash) before executable or script name to run it in bash?
 建造（Build）过程含多个步骤   预处理   编译   链接    预处理  预处理的主要任务   纳入头文件（#include）   宏扩展（#define）   条件编译（#ifdef）    一个虚构的例子</description>
    </item>
    
    <item>
      <title>Test Goat</title>
      <link>http://yangwujie.github.io/hugo-classroom/slides/test-goat/</link>
      <pubDate>Sat, 28 May 2022 22:27:37 +0800</pubDate>
      
      <guid>http://yangwujie.github.io/hugo-classroom/slides/test-goat/</guid>
      <description>Hello Hugo!                                                                                                     A B A B A B                                                                                                                            A B C Y                                                                                                                                                                                                                                               &amp;amp; A M S i o i q f b B x u j o e a ( - x d r a &amp;gt; e f R &amp;gt; c o C n u o b ( n r ) ) d n e e J d r o s i n N o R D t o i u a a n g d d l o i t n e D i a g o n a l s C V u e r r v t e i d c a l n o t A N C : o u l d r r i A a / I v n s i n e e h s t d - e - t r l B i h i i s i o n &#39; s r e q n .</description>
    </item>
    
    <item>
      <title>Test</title>
      <link>http://yangwujie.github.io/hugo-classroom/slides/test/</link>
      <pubDate>Fri, 27 May 2022 22:20:58 +0800</pubDate>
      
      <guid>http://yangwujie.github.io/hugo-classroom/slides/test/</guid>
      <description>       </description>
    </item>
    
    <item>
      <title>Hello</title>
      <link>http://yangwujie.github.io/hugo-classroom/slides/hello/</link>
      <pubDate>Fri, 27 May 2022 20:24:04 +0800</pubDate>
      
      <guid>http://yangwujie.github.io/hugo-classroom/slides/hello/</guid>
      <description>Hello Hugo!  #include &amp;lt;stdio.h&amp;gt; int main() { 	printf(&amp;#34;Hello Wrold!\n); 	return 0; }                      Hello Hugo!
  One  Two  Three    Hello, world!   what?</description>
    </item>
    
  </channel>
</rss>
